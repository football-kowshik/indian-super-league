"""Data about ISL matches."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_matches.ipynb.

# %% auto 0
__all__ = ['log_dir', 'data_dir', 'fetch_matches', 'save_matches', 'get_live_matches']

# %% ../nbs/01_matches.ipynb 3
import warnings
warnings.filterwarnings('ignore')

import datetime
import json
import logging
import os
from pathlib import Path

import requests
import pytz
import pandas as pd

# %% ../nbs/01_matches.ipynb 5
log_dir = Path('../logs')
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

data_dir = Path('../data')
if not os.path.exists(data_dir):
    os.makedirs(data_dir)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filename=os.path.join(log_dir, 'matches.log'),
    filemode='a'
)

# %% ../nbs/01_matches.ipynb 7
def fetch_matches():
    url = 'https://www.indiansuperleague.com/default.aspx?methodtype=3&client=3747164737&sport=2&league=india_sl_stats&timezone=0530&language=&tournament=india_sl_stats_2024'
    headers = {
        'accept': '*/*',
        'referer': 'https://www.indiansuperleague.com/',
        'user-agent': 'Mozilla/5.0'
    }
    r = requests.get(url, headers=headers)
    if r.status_code == 200:
        logging.info(f"API request successful. Content length: {len(r.content)}")
        return r.text
    logging.error(f"API request failed. Status code: {r.status_code}")
    return None

# %% ../nbs/01_matches.ipynb 10
def save_matches(data, filepath='matches.txt'):
    if data:
        with open(filepath, 'a') as f:
            f.write(data + "\n")

# %% ../nbs/01_matches.ipynb 13
def get_live_matches(filepath, now = datetime.datetime.now(pytz.timezone('Asia/Kolkata'))):
    with open(filepath, 'r') as f:
        logs = f.readlines()

    latest = logs[-1]
    matches = json.loads(latest)['matches']

    matches_df = []
    for match in matches:
        matches_df.append({
            'start_at': match['start_date'],
            'end_at': match['end_date'],
            'game_id': match['game_id'],
        })

    matches_df = pd.DataFrame(matches_df)
    matches_df['start_at'] = pd.to_datetime(matches_df['start_at'])
    matches_df['end_at'] = pd.to_datetime(matches_df['end_at'])

    live_matches = matches_df[
        (now >= matches_df["start_at"] - datetime.timedelta(minutes = 15)) &
        (now <= matches_df["end_at"] + datetime.timedelta(minutes = 30))
    ]
    game_ids = list(live_matches['game_id'].values)
    return(game_ids)
